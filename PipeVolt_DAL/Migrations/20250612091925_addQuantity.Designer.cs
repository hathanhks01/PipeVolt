// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PipeVolt_DAL.Models;

#nullable disable

namespace PipeVolt_DAL.Migrations
{
    [DbContext(typeof(PipeVoltDbContext))]
    [Migration("20250612091925_addQuantity")]
    partial class addQuantity
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("PipeVolt_DAL.Models.Brand", b =>
                {
                    b.Property<int>("BrandId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("brand_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BrandId"));

                    b.Property<string>("BrandName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("brand_name");

                    b.HasKey("BrandId")
                        .HasName("PK__BRAND__5E5A8E2748CDEFCA");

                    b.HasIndex(new[] { "BrandName" }, "UQ__BRAND__0C0C3B583015C4E1")
                        .IsUnique();

                    b.ToTable("BRAND");
                });

            modelBuilder.Entity("PipeVolt_DAL.Models.Cart", b =>
                {
                    b.Property<int>("CartId")
                        .HasColumnType("int")
                        .HasColumnName("cart_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("created_at");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int")
                        .HasColumnName("customer_id");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("updated_at");

                    b.HasKey("CartId");

                    b.HasIndex("CustomerId");

                    b.ToTable("CART");
                });

            modelBuilder.Entity("PipeVolt_DAL.Models.CartItem", b =>
                {
                    b.Property<int>("CartItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("cart_item_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CartItemId"));

                    b.Property<int>("CartId")
                        .HasColumnType("int")
                        .HasColumnName("cart_id");

                    b.Property<double>("LineTotal")
                        .HasColumnType("float")
                        .HasColumnName("line_total");

                    b.Property<int>("ProductId")
                        .HasColumnType("int")
                        .HasColumnName("product_id");

                    b.Property<int>("Quantity")
                        .HasColumnType("int")
                        .HasColumnName("quantity");

                    b.Property<double>("UnitPrice")
                        .HasColumnType("float")
                        .HasColumnName("unit_price");

                    b.HasKey("CartItemId");

                    b.HasIndex("CartId");

                    b.HasIndex("ProductId");

                    b.ToTable("CART_ITEM");
                });

            modelBuilder.Entity("PipeVolt_DAL.Models.ChatMessage", b =>
                {
                    b.Property<int>("MessageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("message_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MessageId"));

                    b.Property<string>("AttachmentUrl")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("attachment_url");

                    b.Property<int>("ChatRoomId")
                        .HasColumnType("int")
                        .HasColumnName("chat_room_id");

                    b.Property<bool>("IsRead")
                        .HasColumnType("bit")
                        .HasColumnName("is_read");

                    b.Property<string>("MessageContent")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("message_content");

                    b.Property<int>("MessageType")
                        .HasMaxLength(20)
                        .HasColumnType("int")
                        .HasColumnName("message_type");

                    b.Property<DateTime?>("ReadAt")
                        .HasColumnType("datetime")
                        .HasColumnName("read_at");

                    b.Property<int>("SenderId")
                        .HasColumnType("int")
                        .HasColumnName("sender_id");

                    b.Property<int?>("SenderType")
                        .HasMaxLength(20)
                        .HasColumnType("int")
                        .HasColumnName("sender_type");

                    b.Property<DateTime>("SentAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("sent_at")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("MessageId")
                        .HasName("PK__CHAT_MESSAGE__ID");

                    b.HasIndex("ChatRoomId")
                        .HasDatabaseName("IX_CHAT_MESSAGE_ROOM_ID");

                    b.HasIndex("IsRead")
                        .HasDatabaseName("IX_CHAT_MESSAGE_IS_READ");

                    b.HasIndex("SentAt")
                        .HasDatabaseName("IX_CHAT_MESSAGE_SENT_AT");

                    b.ToTable("CHAT_MESSAGE");
                });

            modelBuilder.Entity("PipeVolt_DAL.Models.ChatParticipant", b =>
                {
                    b.Property<int>("ParticipantId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("participant_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ParticipantId"));

                    b.Property<int>("ChatRoomId")
                        .HasColumnType("int")
                        .HasColumnName("chat_room_id");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("is_active");

                    b.Property<DateTime>("JoinedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("joined_at")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateTime?>("LeftAt")
                        .HasColumnType("datetime")
                        .HasColumnName("left_at");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.Property<int>("UserType")
                        .HasMaxLength(20)
                        .HasColumnType("int")
                        .HasColumnName("user_type");

                    b.HasKey("ParticipantId")
                        .HasName("PK__CHAT_PARTICIPANT__ID");

                    b.HasIndex("ChatRoomId", "UserId", "UserType")
                        .IsUnique()
                        .HasDatabaseName("UQ__CHAT_PARTICIPANT__ROOM_USER");

                    b.ToTable("CHAT_PARTICIPANT");
                });

            modelBuilder.Entity("PipeVolt_DAL.Models.ChatRoom", b =>
                {
                    b.Property<int>("ChatRoomId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("chat_room_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ChatRoomId"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int")
                        .HasColumnName("customer_id");

                    b.Property<int?>("EmployeeId")
                        .HasColumnType("int")
                        .HasColumnName("employee_id");

                    b.Property<DateTime?>("LastMessageAt")
                        .HasColumnType("datetime")
                        .HasColumnName("last_message_at");

                    b.Property<string>("RoomName")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("room_name");

                    b.Property<int>("Status")
                        .HasMaxLength(20)
                        .HasColumnType("int")
                        .HasColumnName("status");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("ChatRoomId")
                        .HasName("PK__CHAT_ROOM__ID");

                    b.HasIndex("CustomerId");

                    b.HasIndex("EmployeeId");

                    b.ToTable("CHAT_ROOM");
                });

            modelBuilder.Entity("PipeVolt_DAL.Models.Customer", b =>
                {
                    b.Property<int>("CustomerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("customer_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CustomerId"));

                    b.Property<string>("Address")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("address");

                    b.Property<string>("CustomerCode")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("customer_code");

                    b.Property<string>("CustomerName")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasColumnName("customer_name");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("email");

                    b.Property<string>("Phone")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("phone");

                    b.Property<DateOnly?>("RegistrationDate")
                        .HasColumnType("date")
                        .HasColumnName("registration_date");

                    b.HasKey("CustomerId")
                        .HasName("PK__CUSTOMER__CD65CB85C2818D2A");

                    b.HasIndex(new[] { "CustomerCode" }, "UQ__CUSTOMER__6A9E4CB785B4A11F")
                        .IsUnique()
                        .HasFilter("[customer_code] IS NOT NULL");

                    b.ToTable("CUSTOMER");
                });

            modelBuilder.Entity("PipeVolt_DAL.Models.Employee", b =>
                {
                    b.Property<int>("EmployeeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("employee_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EmployeeId"));

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("email");

                    b.Property<string>("EmployeeCode")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("employee_code");

                    b.Property<string>("EmployeeName")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasColumnName("employee_name");

                    b.Property<DateOnly?>("HireDate")
                        .HasColumnType("date")
                        .HasColumnName("hire_date");

                    b.Property<string>("Phone")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("phone");

                    b.Property<string>("Position")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("position");

                    b.HasKey("EmployeeId")
                        .HasName("PK__EMPLOYEE__C52E0BA83BED5CBA");

                    b.HasIndex(new[] { "EmployeeCode" }, "UQ__EMPLOYEE__B0AA7345A2B15837")
                        .IsUnique()
                        .HasFilter("[employee_code] IS NOT NULL");

                    b.ToTable("EMPLOYEE");
                });

            modelBuilder.Entity("PipeVolt_DAL.Models.Inventory", b =>
                {
                    b.Property<int>("InventoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("inventory_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("InventoryId"));

                    b.Property<int>("ProductId")
                        .HasColumnType("int")
                        .HasColumnName("product_id");

                    b.Property<int?>("PurchaseOrderId")
                        .HasColumnType("int")
                        .HasColumnName("purchase_order_id");

                    b.Property<int>("Quantity")
                        .HasColumnType("int")
                        .HasColumnName("quantity");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("WarehouseId")
                        .HasColumnType("int")
                        .HasColumnName("warehouse_id");

                    b.HasKey("InventoryId")
                        .HasName("PK__INVENTOR__B59ACC491540FD43");

                    b.HasIndex("ProductId");

                    b.HasIndex("PurchaseOrderId");

                    b.HasIndex("WarehouseId");

                    b.ToTable("INVENTORY");
                });

            modelBuilder.Entity("PipeVolt_DAL.Models.Invoice", b =>
                {
                    b.Property<int>("InvoiceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("invoice_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("InvoiceId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("created_at");

                    b.Property<string>("CustomerAddress")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("customer_address");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int")
                        .HasColumnName("customer_id");

                    b.Property<string>("CustomerName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasColumnName("customer_name");

                    b.Property<string>("CustomerPhone")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("customer_phone");

                    b.Property<string>("CustomerTaxCode")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("customer_tax_code");

                    b.Property<double?>("DiscountAmount")
                        .HasColumnType("float")
                        .HasColumnName("discount_amount");

                    b.Property<DateTime?>("DueDate")
                        .HasColumnType("datetime")
                        .HasColumnName("due_date");

                    b.Property<int?>("EmployeeId")
                        .HasColumnType("int")
                        .HasColumnName("employee_id");

                    b.Property<string>("InvoiceNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("invoice_number");

                    b.Property<string>("InvoiceTemplate")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("invoice_template");

                    b.Property<DateTime>("IssueDate")
                        .HasColumnType("datetime")
                        .HasColumnName("issue_date");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("notes");

                    b.Property<int>("OrderId")
                        .HasColumnType("int")
                        .HasColumnName("order_id");

                    b.Property<int>("PaymentStatus")
                        .HasMaxLength(50)
                        .HasColumnType("int")
                        .HasColumnName("payment_status");

                    b.Property<int>("Status")
                        .HasMaxLength(50)
                        .HasColumnType("int")
                        .HasColumnName("status");

                    b.Property<double>("SubTotal")
                        .HasColumnType("float")
                        .HasColumnName("subtotal");

                    b.Property<double>("TotalAmount")
                        .HasColumnType("float")
                        .HasColumnName("total_amount");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<double>("VatAmount")
                        .HasColumnType("float")
                        .HasColumnName("vat_amount");

                    b.Property<double>("VatRate")
                        .HasColumnType("float")
                        .HasColumnName("vat_rate");

                    b.HasKey("InvoiceId")
                        .HasName("PK__INVOICE__ID");

                    b.HasIndex("CustomerId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("OrderId");

                    b.HasIndex(new[] { "InvoiceNumber" }, "UQ__INVOICE__number")
                        .IsUnique();

                    b.ToTable("INVOICE");
                });

            modelBuilder.Entity("PipeVolt_DAL.Models.InvoiceDetail", b =>
                {
                    b.Property<int>("InvoiceDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("invoice_detail_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("InvoiceDetailId"));

                    b.Property<double?>("Discount")
                        .HasColumnType("float")
                        .HasColumnName("discount");

                    b.Property<int>("InvoiceId")
                        .HasColumnType("int")
                        .HasColumnName("invoice_id");

                    b.Property<double?>("LineTotal")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("float")
                        .HasColumnName("line_total")
                        .HasComputedColumnSql("(([quantity]*[unit_price])-isnull([discount],0))", false);

                    b.Property<string>("ProductCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("product_code");

                    b.Property<int>("ProductId")
                        .HasColumnType("int")
                        .HasColumnName("product_id");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("product_name");

                    b.Property<int>("Quantity")
                        .HasColumnType("int")
                        .HasColumnName("quantity");

                    b.Property<string>("Unit")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("unit");

                    b.Property<double>("UnitPrice")
                        .HasColumnType("float")
                        .HasColumnName("unit_price");

                    b.HasKey("InvoiceDetailId")
                        .HasName("PK__INVOICE_DETAIL__ID");

                    b.HasIndex("InvoiceId");

                    b.HasIndex("ProductId");

                    b.ToTable("INVOICE_DETAIL");
                });

            modelBuilder.Entity("PipeVolt_DAL.Models.OrderDetail", b =>
                {
                    b.Property<int>("OrderDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("order_detail_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderDetailId"));

                    b.Property<double?>("Discount")
                        .HasColumnType("float")
                        .HasColumnName("discount");

                    b.Property<double?>("LineTotal")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("float")
                        .HasColumnName("line_total")
                        .HasComputedColumnSql("([quantity]*[unit_price]-[discount])", false);

                    b.Property<int>("OrderId")
                        .HasColumnType("int")
                        .HasColumnName("order_id");

                    b.Property<int>("ProductId")
                        .HasColumnType("int")
                        .HasColumnName("product_id");

                    b.Property<int?>("Quantity")
                        .HasColumnType("int")
                        .HasColumnName("quantity");

                    b.Property<double?>("UnitPrice")
                        .HasColumnType("float")
                        .HasColumnName("unit_price");

                    b.HasKey("OrderDetailId")
                        .HasName("PK__ORDER_DE__3C5A4080964198A2");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("ORDER_DETAIL");
                });

            modelBuilder.Entity("PipeVolt_DAL.Models.PaymentMethod", b =>
                {
                    b.Property<int>("PaymentMethodId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("payment_method_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PaymentMethodId"));

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("description");

                    b.Property<bool>("IsOnline")
                        .HasColumnType("bit")
                        .HasColumnName("is_online");

                    b.Property<string>("MethodName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("method_name");

                    b.HasKey("PaymentMethodId")
                        .HasName("PK__PAYMENT_METHOD__E8C9B7A3");

                    b.ToTable("PAYMENT_METHOD");
                });

            modelBuilder.Entity("PipeVolt_DAL.Models.PaymentTransaction", b =>
                {
                    b.Property<int>("TransactionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("transaction_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TransactionId"));

                    b.Property<double>("Amount")
                        .HasColumnType("float")
                        .HasColumnName("amount");

                    b.Property<string>("GatewayResponse")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("gateway_response");

                    b.Property<int>("OrderId")
                        .HasColumnType("int")
                        .HasColumnName("order_id");

                    b.Property<int>("PaymentMethodId")
                        .HasColumnType("int")
                        .HasColumnName("payment_method_id");

                    b.Property<int?>("Status")
                        .HasColumnType("int")
                        .HasColumnName("status");

                    b.Property<string>("TransactionCode")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("transaction_code");

                    b.Property<DateTime>("TransactionDate")
                        .HasColumnType("datetime")
                        .HasColumnName("transaction_date");

                    b.HasKey("TransactionId")
                        .HasName("PK__PAYMENT_TRANSACTION__A1C3D8F2");

                    b.HasIndex("OrderId");

                    b.HasIndex("PaymentMethodId");

                    b.ToTable("PAYMENT_TRANSACTION");
                });

            modelBuilder.Entity("PipeVolt_DAL.Models.Product", b =>
                {
                    b.Property<int>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("product_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProductId"));

                    b.Property<int?>("BrandId")
                        .HasColumnType("int")
                        .HasColumnName("brand_id");

                    b.Property<int?>("CategoryId")
                        .HasColumnType("int")
                        .HasColumnName("category_id");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("description");

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("image_url");

                    b.Property<string>("ProductCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("product_code");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("product_name");

                    b.Property<double?>("SellingPrice")
                        .HasColumnType("float")
                        .HasColumnName("selling_price");

                    b.Property<string>("Unit")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("unit");

                    b.Property<int?>("quantity")
                        .HasColumnType("int");

                    b.HasKey("ProductId")
                        .HasName("PK__PRODUCT__47027DF521C9A1DD");

                    b.HasIndex("BrandId");

                    b.HasIndex("CategoryId");

                    b.HasIndex(new[] { "ProductCode" }, "UQ__PRODUCT__AE1A8CC4FB8207A6")
                        .IsUnique();

                    b.ToTable("PRODUCT");
                });

            modelBuilder.Entity("PipeVolt_DAL.Models.ProductCategory", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("category_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CategoryId"));

                    b.Property<string>("CategoryName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("category_name");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("description");

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("image_url");

                    b.HasKey("CategoryId")
                        .HasName("PK__PRODUCT___D54EE9B4968BF011");

                    b.ToTable("PRODUCT_CATEGORY");
                });

            modelBuilder.Entity("PipeVolt_DAL.Models.PurchaseOrder", b =>
                {
                    b.Property<int>("PurchaseOrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("purchase_order_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PurchaseOrderId"));

                    b.Property<int?>("EmployeeId")
                        .HasColumnType("int")
                        .HasColumnName("employee_id");

                    b.Property<DateTime?>("OrderDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("order_date")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("PurchaseOrderCode")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("purchase_order_code");

                    b.Property<int?>("Status")
                        .HasColumnType("int")
                        .HasColumnName("status");

                    b.Property<int?>("SupplierId")
                        .HasColumnType("int")
                        .HasColumnName("supplier_id");

                    b.Property<double?>("TotalAmount")
                        .HasColumnType("float")
                        .HasColumnName("total_amount");

                    b.HasKey("PurchaseOrderId")
                        .HasName("PK__PURCHASE__AFCA88E6D458B84D");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("SupplierId");

                    b.HasIndex(new[] { "PurchaseOrderCode" }, "UQ__PURCHASE__19DA46F1BE5EB09D")
                        .IsUnique()
                        .HasFilter("[purchase_order_code] IS NOT NULL");

                    b.ToTable("PURCHASE_ORDER");
                });

            modelBuilder.Entity("PipeVolt_DAL.Models.PurchaseOrderDetail", b =>
                {
                    b.Property<int>("PurchaseOrderDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("purchase_order_detail_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PurchaseOrderDetailId"));

                    b.Property<double?>("LineTotal")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("float")
                        .HasColumnName("line_total")
                        .HasComputedColumnSql("([quantity]*[unit_cost])", false);

                    b.Property<int>("ProductId")
                        .HasColumnType("int")
                        .HasColumnName("product_id");

                    b.Property<int>("PurchaseOrderId")
                        .HasColumnType("int")
                        .HasColumnName("purchase_order_id");

                    b.Property<int?>("Quantity")
                        .HasColumnType("int")
                        .HasColumnName("quantity");

                    b.Property<double?>("UnitCost")
                        .HasColumnType("float")
                        .HasColumnName("unit_cost");

                    b.HasKey("PurchaseOrderDetailId")
                        .HasName("PK__PURCHASE__4B370F6D511BCF68");

                    b.HasIndex("ProductId");

                    b.HasIndex("PurchaseOrderId");

                    b.ToTable("PURCHASE_ORDER_DETAIL");
                });

            modelBuilder.Entity("PipeVolt_DAL.Models.SalesOrder", b =>
                {
                    b.Property<int>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("order_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderId"));

                    b.Property<int?>("CustomerId")
                        .HasColumnType("int")
                        .HasColumnName("customer_id");

                    b.Property<double?>("DiscountAmount")
                        .HasColumnType("float")
                        .HasColumnName("discount_amount");

                    b.Property<int?>("EmployeeId")
                        .HasColumnType("int")
                        .HasColumnName("employee_id");

                    b.Property<double?>("NetAmount")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("float")
                        .HasColumnName("net_amount")
                        .HasComputedColumnSql("(([total_amount]-[discount_amount])+[tax_amount])", false);

                    b.Property<string>("OrderCode")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("order_code");

                    b.Property<DateTime?>("OrderDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("order_date")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("PaymentMethodId")
                        .HasColumnType("int")
                        .HasColumnName("payment_method_id");

                    b.Property<int?>("Status")
                        .HasColumnType("int")
                        .HasColumnName("status");

                    b.Property<double?>("TaxAmount")
                        .HasColumnType("float")
                        .HasColumnName("tax_amount");

                    b.Property<double?>("TotalAmount")
                        .HasColumnType("float")
                        .HasColumnName("total_amount");

                    b.HasKey("OrderId")
                        .HasName("PK__SALES_OR__4659622993289FF9");

                    b.HasIndex("CustomerId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("PaymentMethodId");

                    b.HasIndex(new[] { "OrderCode" }, "UQ__SALES_OR__99D12D3F11C3C006")
                        .IsUnique()
                        .HasFilter("[order_code] IS NOT NULL");

                    b.ToTable("SALES_ORDER");
                });

            modelBuilder.Entity("PipeVolt_DAL.Models.Supplier", b =>
                {
                    b.Property<int>("SupplierId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("supplier_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SupplierId"));

                    b.Property<string>("Address")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("address");

                    b.Property<string>("ContactPerson")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("contact_person");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("email");

                    b.Property<string>("Phone")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("phone");

                    b.Property<string>("SupplierName")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasColumnName("supplier_name");

                    b.HasKey("SupplierId")
                        .HasName("PK__SUPPLIER__6EE594E812C79687");

                    b.ToTable("SUPPLIER");
                });

            modelBuilder.Entity("PipeVolt_DAL.Models.Supply", b =>
                {
                    b.Property<int>("SupplyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("supply_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SupplyId"));

                    b.Property<double>("CostPrice")
                        .HasColumnType("float")
                        .HasColumnName("cost_price");

                    b.Property<int>("ProductId")
                        .HasColumnType("int")
                        .HasColumnName("product_id");

                    b.Property<int>("SupplierId")
                        .HasColumnType("int")
                        .HasColumnName("supplier_id");

                    b.Property<DateOnly>("SupplyDate")
                        .HasColumnType("date")
                        .HasColumnName("supply_date");

                    b.HasKey("SupplyId")
                        .HasName("PK__SUPPLY__4870CD837B5C9A2E");

                    b.HasIndex("ProductId");

                    b.HasIndex("SupplierId");

                    b.ToTable("SUPPLY");
                });

            modelBuilder.Entity("PipeVolt_DAL.Models.UserAccount", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"));

                    b.Property<int?>("CustomerId")
                        .HasColumnType("int")
                        .HasColumnName("customer_id");

                    b.Property<int?>("EmployeeId")
                        .HasColumnType("int")
                        .HasColumnName("employee_id");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("password");

                    b.Property<int?>("Status")
                        .HasColumnType("int")
                        .HasColumnName("status");

                    b.Property<int>("UserType")
                        .HasColumnType("int")
                        .HasColumnName("user_type");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("username");

                    b.HasKey("UserId")
                        .HasName("PK__USER_ACC__B9BE370FE3A6149D");

                    b.HasIndex("CustomerId");

                    b.HasIndex("EmployeeId")
                        .IsUnique()
                        .HasFilter("[employee_id] IS NOT NULL");

                    b.HasIndex(new[] { "Username" }, "UQ__USER_ACC__F3DBC5721AE09BBF")
                        .IsUnique();

                    b.ToTable("USER_ACCOUNT");
                });

            modelBuilder.Entity("PipeVolt_DAL.Models.Warehouse", b =>
                {
                    b.Property<int>("WarehouseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("warehouse_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("WarehouseId"));

                    b.Property<string>("Address")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("address");

                    b.Property<string>("WarehouseCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WarehouseName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("warehouse_name");

                    b.HasKey("WarehouseId")
                        .HasName("PK__WAREHOUS__734FE6BFE44CB61E");

                    b.ToTable("WAREHOUSE");
                });

            modelBuilder.Entity("PipeVolt_DAL.Models.Warranty", b =>
                {
                    b.Property<int>("WarrantyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("warranty_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("WarrantyId"));

                    b.Property<int>("CustomerId")
                        .HasColumnType("int")
                        .HasColumnName("customer_id");

                    b.Property<DateOnly?>("EndDate")
                        .HasColumnType("date")
                        .HasColumnName("end_date");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("notes");

                    b.Property<int>("ProductId")
                        .HasColumnType("int")
                        .HasColumnName("product_id");

                    b.Property<string>("SerialNumber")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("serial_number");

                    b.Property<DateOnly?>("StartDate")
                        .HasColumnType("date")
                        .HasColumnName("start_date");

                    b.Property<int?>("Status")
                        .HasColumnType("int")
                        .HasColumnName("status");

                    b.HasKey("WarrantyId")
                        .HasName("PK__WARRANTY__24E65B0430326D8D");

                    b.HasIndex("CustomerId");

                    b.HasIndex("ProductId");

                    b.ToTable("WARRANTY");
                });

            modelBuilder.Entity("PipeVolt_DAL.Models.Cart", b =>
                {
                    b.HasOne("PipeVolt_DAL.Models.Customer", "Customer")
                        .WithMany("Carts")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("PipeVolt_DAL.Models.CartItem", b =>
                {
                    b.HasOne("PipeVolt_DAL.Models.Cart", "Cart")
                        .WithMany("CartItems")
                        .HasForeignKey("CartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PipeVolt_DAL.Models.Product", "Product")
                        .WithMany("CartItems")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cart");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("PipeVolt_DAL.Models.ChatMessage", b =>
                {
                    b.HasOne("PipeVolt_DAL.Models.ChatRoom", "ChatRoom")
                        .WithMany("ChatMessages")
                        .HasForeignKey("ChatRoomId")
                        .IsRequired()
                        .HasConstraintName("FK__CHAT_MESSAGE__room");

                    b.Navigation("ChatRoom");
                });

            modelBuilder.Entity("PipeVolt_DAL.Models.ChatParticipant", b =>
                {
                    b.HasOne("PipeVolt_DAL.Models.ChatRoom", "ChatRoom")
                        .WithMany("ChatParticipants")
                        .HasForeignKey("ChatRoomId")
                        .IsRequired()
                        .HasConstraintName("FK__CHAT_PARTICIPANT__room");

                    b.Navigation("ChatRoom");
                });

            modelBuilder.Entity("PipeVolt_DAL.Models.ChatRoom", b =>
                {
                    b.HasOne("PipeVolt_DAL.Models.Customer", "Customer")
                        .WithMany("ChatRooms")
                        .HasForeignKey("CustomerId")
                        .IsRequired()
                        .HasConstraintName("FK__CHAT_ROOM__customer");

                    b.HasOne("PipeVolt_DAL.Models.Employee", "Employee")
                        .WithMany("ChatRooms")
                        .HasForeignKey("EmployeeId")
                        .HasConstraintName("FK__CHAT_ROOM__employee");

                    b.Navigation("Customer");

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("PipeVolt_DAL.Models.Inventory", b =>
                {
                    b.HasOne("PipeVolt_DAL.Models.Product", "Product")
                        .WithMany("Inventories")
                        .HasForeignKey("ProductId")
                        .IsRequired()
                        .HasConstraintName("FK__INVENTORY__produ__5629CD9C");

                    b.HasOne("PipeVolt_DAL.Models.PurchaseOrder", "PurchaseOrder")
                        .WithMany("Inventories")
                        .HasForeignKey("PurchaseOrderId")
                        .HasConstraintName("FK__INVENTORY__purch__571DF1D5");

                    b.HasOne("PipeVolt_DAL.Models.Warehouse", "Warehouse")
                        .WithMany("Inventories")
                        .HasForeignKey("WarehouseId")
                        .IsRequired()
                        .HasConstraintName("FK__INVENTORY__wareh__5535A963");

                    b.Navigation("Product");

                    b.Navigation("PurchaseOrder");

                    b.Navigation("Warehouse");
                });

            modelBuilder.Entity("PipeVolt_DAL.Models.Invoice", b =>
                {
                    b.HasOne("PipeVolt_DAL.Models.Customer", "Customer")
                        .WithMany("Invoices")
                        .HasForeignKey("CustomerId")
                        .IsRequired();

                    b.HasOne("PipeVolt_DAL.Models.Employee", "Employee")
                        .WithMany("Invoices")
                        .HasForeignKey("EmployeeId");

                    b.HasOne("PipeVolt_DAL.Models.SalesOrder", "Order")
                        .WithMany("Invoices")
                        .HasForeignKey("OrderId")
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Employee");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("PipeVolt_DAL.Models.InvoiceDetail", b =>
                {
                    b.HasOne("PipeVolt_DAL.Models.Invoice", "Invoice")
                        .WithMany("InvoiceDetails")
                        .HasForeignKey("InvoiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PipeVolt_DAL.Models.Product", "Product")
                        .WithMany("InvoiceDetails")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Invoice");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("PipeVolt_DAL.Models.OrderDetail", b =>
                {
                    b.HasOne("PipeVolt_DAL.Models.SalesOrder", "Order")
                        .WithMany("OrderDetails")
                        .HasForeignKey("OrderId")
                        .IsRequired()
                        .HasConstraintName("FK__ORDER_DET__order__693CA210");

                    b.HasOne("PipeVolt_DAL.Models.Product", "Product")
                        .WithMany("OrderDetails")
                        .HasForeignKey("ProductId")
                        .IsRequired()
                        .HasConstraintName("FK__ORDER_DET__produ__6A30C649");

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("PipeVolt_DAL.Models.PaymentTransaction", b =>
                {
                    b.HasOne("PipeVolt_DAL.Models.SalesOrder", "Order")
                        .WithMany("PaymentTransactions")
                        .HasForeignKey("OrderId")
                        .IsRequired()
                        .HasConstraintName("FK__PAYMENT_TRANS__order__7A672E12");

                    b.HasOne("PipeVolt_DAL.Models.PaymentMethod", "PaymentMethod")
                        .WithMany("PaymentTransactions")
                        .HasForeignKey("PaymentMethodId")
                        .IsRequired()
                        .HasConstraintName("FK__PAYMENT_TRANS__method__7B573F34");

                    b.Navigation("Order");

                    b.Navigation("PaymentMethod");
                });

            modelBuilder.Entity("PipeVolt_DAL.Models.Product", b =>
                {
                    b.HasOne("PipeVolt_DAL.Models.Brand", "Brand")
                        .WithMany("Products")
                        .HasForeignKey("BrandId")
                        .HasConstraintName("FK__PRODUCT__brand_i__440B1D61");

                    b.HasOne("PipeVolt_DAL.Models.ProductCategory", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .HasConstraintName("FK__PRODUCT__categor__4316F928");

                    b.Navigation("Brand");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("PipeVolt_DAL.Models.PurchaseOrder", b =>
                {
                    b.HasOne("PipeVolt_DAL.Models.Employee", "Employee")
                        .WithMany("PurchaseOrders")
                        .HasForeignKey("EmployeeId")
                        .HasConstraintName("FK__PURCHASE___emplo__5165187F");

                    b.HasOne("PipeVolt_DAL.Models.Supplier", "Supplier")
                        .WithMany("PurchaseOrders")
                        .HasForeignKey("SupplierId")
                        .HasConstraintName("FK__PURCHASE___suppl__5070F446");

                    b.Navigation("Employee");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("PipeVolt_DAL.Models.PurchaseOrderDetail", b =>
                {
                    b.HasOne("PipeVolt_DAL.Models.Product", "Product")
                        .WithMany("PurchaseOrderDetails")
                        .HasForeignKey("ProductId")
                        .IsRequired()
                        .HasConstraintName("FK__PURCHASE___produ__6E01572D");

                    b.HasOne("PipeVolt_DAL.Models.PurchaseOrder", "PurchaseOrder")
                        .WithMany("PurchaseOrderDetails")
                        .HasForeignKey("PurchaseOrderId")
                        .IsRequired()
                        .HasConstraintName("FK__PURCHASE___purch__6D0D32F4");

                    b.Navigation("Product");

                    b.Navigation("PurchaseOrder");
                });

            modelBuilder.Entity("PipeVolt_DAL.Models.SalesOrder", b =>
                {
                    b.HasOne("PipeVolt_DAL.Models.Customer", "Customer")
                        .WithMany("SalesOrders")
                        .HasForeignKey("CustomerId")
                        .HasConstraintName("FK__SALES_ORD__custo__6477ECF3");

                    b.HasOne("PipeVolt_DAL.Models.Employee", "Employee")
                        .WithMany("SalesOrders")
                        .HasForeignKey("EmployeeId")
                        .HasConstraintName("FK__SALES_ORD__emplo__656C112C");

                    b.HasOne("PipeVolt_DAL.Models.PaymentMethod", "PaymentMethod")
                        .WithMany("SalesOrders")
                        .HasForeignKey("PaymentMethodId");

                    b.Navigation("Customer");

                    b.Navigation("Employee");

                    b.Navigation("PaymentMethod");
                });

            modelBuilder.Entity("PipeVolt_DAL.Models.Supply", b =>
                {
                    b.HasOne("PipeVolt_DAL.Models.Product", "Product")
                        .WithMany("Supplies")
                        .HasForeignKey("ProductId")
                        .IsRequired()
                        .HasConstraintName("FK__SUPPLY__product___48CFD27E");

                    b.HasOne("PipeVolt_DAL.Models.Supplier", "Supplier")
                        .WithMany("Supplies")
                        .HasForeignKey("SupplierId")
                        .IsRequired()
                        .HasConstraintName("FK__SUPPLY__supplier__49C3F6B7");

                    b.Navigation("Product");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("PipeVolt_DAL.Models.UserAccount", b =>
                {
                    b.HasOne("PipeVolt_DAL.Models.Customer", "Customer")
                        .WithMany("UserAccounts")
                        .HasForeignKey("CustomerId")
                        .HasConstraintName("FK__USER_ACCO__custo__5FB337D6");

                    b.HasOne("PipeVolt_DAL.Models.Employee", "Employee")
                        .WithOne("UserAccount")
                        .HasForeignKey("PipeVolt_DAL.Models.UserAccount", "EmployeeId")
                        .HasConstraintName("FK__USER_ACCO__emplo__5EBF139D");

                    b.Navigation("Customer");

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("PipeVolt_DAL.Models.Warranty", b =>
                {
                    b.HasOne("PipeVolt_DAL.Models.Customer", "Customer")
                        .WithMany("Warranties")
                        .HasForeignKey("CustomerId")
                        .IsRequired()
                        .HasConstraintName("FK__WARRANTY__custom__71D1E811");

                    b.HasOne("PipeVolt_DAL.Models.Product", "Product")
                        .WithMany("Warranties")
                        .HasForeignKey("ProductId")
                        .IsRequired()
                        .HasConstraintName("FK__WARRANTY__produc__70DDC3D8");

                    b.Navigation("Customer");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("PipeVolt_DAL.Models.Brand", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("PipeVolt_DAL.Models.Cart", b =>
                {
                    b.Navigation("CartItems");
                });

            modelBuilder.Entity("PipeVolt_DAL.Models.ChatRoom", b =>
                {
                    b.Navigation("ChatMessages");

                    b.Navigation("ChatParticipants");
                });

            modelBuilder.Entity("PipeVolt_DAL.Models.Customer", b =>
                {
                    b.Navigation("Carts");

                    b.Navigation("ChatRooms");

                    b.Navigation("Invoices");

                    b.Navigation("SalesOrders");

                    b.Navigation("UserAccounts");

                    b.Navigation("Warranties");
                });

            modelBuilder.Entity("PipeVolt_DAL.Models.Employee", b =>
                {
                    b.Navigation("ChatRooms");

                    b.Navigation("Invoices");

                    b.Navigation("PurchaseOrders");

                    b.Navigation("SalesOrders");

                    b.Navigation("UserAccount");
                });

            modelBuilder.Entity("PipeVolt_DAL.Models.Invoice", b =>
                {
                    b.Navigation("InvoiceDetails");
                });

            modelBuilder.Entity("PipeVolt_DAL.Models.PaymentMethod", b =>
                {
                    b.Navigation("PaymentTransactions");

                    b.Navigation("SalesOrders");
                });

            modelBuilder.Entity("PipeVolt_DAL.Models.Product", b =>
                {
                    b.Navigation("CartItems");

                    b.Navigation("Inventories");

                    b.Navigation("InvoiceDetails");

                    b.Navigation("OrderDetails");

                    b.Navigation("PurchaseOrderDetails");

                    b.Navigation("Supplies");

                    b.Navigation("Warranties");
                });

            modelBuilder.Entity("PipeVolt_DAL.Models.ProductCategory", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("PipeVolt_DAL.Models.PurchaseOrder", b =>
                {
                    b.Navigation("Inventories");

                    b.Navigation("PurchaseOrderDetails");
                });

            modelBuilder.Entity("PipeVolt_DAL.Models.SalesOrder", b =>
                {
                    b.Navigation("Invoices");

                    b.Navigation("OrderDetails");

                    b.Navigation("PaymentTransactions");
                });

            modelBuilder.Entity("PipeVolt_DAL.Models.Supplier", b =>
                {
                    b.Navigation("PurchaseOrders");

                    b.Navigation("Supplies");
                });

            modelBuilder.Entity("PipeVolt_DAL.Models.Warehouse", b =>
                {
                    b.Navigation("Inventories");
                });
#pragma warning restore 612, 618
        }
    }
}
